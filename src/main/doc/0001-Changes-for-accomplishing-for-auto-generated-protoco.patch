From 47f27296c9a3d2ca59160553a1370c2038861e4a Mon Sep 17 00:00:00 2001
From: Bengt Martensson <barf@bengt-martensson.de>
Date: Sun, 22 Oct 2017 14:25:11 +0200
Subject: [PATCH] Changes for accomplishing for auto-generated protocol
 implementations.

---
 src/IRremote.h                      |  4 +++
 src/extra-protocol-declarations.inc |  0
 src/extra-protocol-symbols.inc      |  0
 src/utils.cpp                       | 53 +++++++++++++++++++++++++++++++++++++
 4 files changed, 57 insertions(+)
 create mode 100644 src/extra-protocol-declarations.inc
 create mode 100644 src/extra-protocol-symbols.inc
 create mode 100644 src/utils.cpp

diff --git a/src/IRremote.h b/src/IRremote.h
index 268204b..a320de4 100644
--- a/src/IRremote.h
+++ b/src/IRremote.h
@@ -83,6 +83,8 @@
 #define DECODE_LEGO_PF       0 // NOT WRITTEN
 #define SEND_LEGO_PF         1
 
+#include "extra-protocol-symbols.inc"
+
 //------------------------------------------------------------------------------
 // When sending a Pronto code we request to send either the "once" code
 //                                                   or the "repeat" code
@@ -401,6 +403,8 @@ class IRsend
 			void  sendLegoPowerFunctions (uint16_t data, bool repeat = true) ;
 #		endif
 
+#include "extra-protocol-declarations.inc"
+
 #ifdef USE_SOFT_CARRIER
 	private:
 		int sendPin;
diff --git a/src/extra-protocol-declarations.inc b/src/extra-protocol-declarations.inc
new file mode 100644
index 0000000..e69de29
diff --git a/src/extra-protocol-symbols.inc b/src/extra-protocol-symbols.inc
new file mode 100644
index 0000000..e69de29
diff --git a/src/utils.cpp b/src/utils.cpp
new file mode 100644
index 0000000..2fc5f72
--- /dev/null
+++ b/src/utils.cpp
@@ -0,0 +1,53 @@
+const unsigned int BITS_IN_BYTE = 8U;
+
+unsigned int bitCount(unsigned int data) {
+    // Not the very most efficient implementation
+    unsigned int result = 0U;
+    unsigned int d = data;
+    for (unsigned int i = 0U; i < BITS_IN_BYTE * sizeof(unsigned int); i++) {
+        result += (d & 1);
+        d >>= 1U;
+    }
+    return result;
+}
+
+unsigned int bitReverse(unsigned int data, unsigned int width) {
+    // Not the very most efficient implementation
+    unsigned int result = 0U;
+    unsigned int d = data;
+    for (unsigned int i = 0U; i < width; i++) {
+        result <<= 1U;
+        result |= (d & 1);
+        d >>= 1U;
+    }
+    return result;
+}
+
+static inline unsigned int ones(unsigned int n) {
+    return (1U << n) - 1U;
+}
+
+static inline unsigned int maskTo(unsigned int data, unsigned int width) {
+    return data & ones(width);
+}
+
+static unsigned int preprocessFiniteBitField(unsigned int data,
+        unsigned int width,
+        unsigned int chop,
+        bool complement,
+        bool reverse) {
+    unsigned int realdata = complement ? ~data : data;
+    realdata >>= chop;
+    if (reverse)
+        realdata = bitReverse(realdata, width);
+    return realdata;
+}
+
+unsigned int finiteBitField(unsigned int data,
+        unsigned int width,
+        unsigned int chop,
+        bool complement,
+        bool reverse) {
+    unsigned int realdata = preprocessFiniteBitField(data, width, chop, complement, reverse);
+    return maskTo(realdata, (int) width);
+}
-- 
2.13.6

