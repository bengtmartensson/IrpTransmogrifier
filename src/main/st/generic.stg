/*
Copyright (C) 2016 Bengt Martensson.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see http://www.gnu.org/licenses/.
*/

IsAbstract() ::= "true"
ManyProtocolsInOneFile() ::= "false"

beginLineComment() ::= ""
endLineComment() ::= ""

LineComment(text) ::= <<
<beginLineComment()><text><endLineComment()>
>>

GeneratedBy() ::= <<
<LineComment("This file was generated by IrpTransmogrifier.")>
>>

FileBegin() ::= <<
<GeneratedBy()>
<FilePreamble()>
>>

FileEnd() ::= <<
<FilePostamble()>
>>

FilePreamble() ::= ""
FilePostamble() ::= ""

ProtocolNameComment(protocolName) ::= <<
<beginLineComment>ProtocolName: <protocolName><endLineComment()>
>>

TopFunctions() ::= <<
<TopFunction("Intro", code.intro)>
    
<TopFunction("Repeat", code.repeat)>
    
<TopFunction("Ending", code.ending)>
>>

implementationTypes ::= [
"booleanType":              "undefined",
"dutyCycleType":            "undefined",
"dutyCycleTypeSuffix":      "",
"frequencyType":            "undefined",
"frequencyTypeSuffix":      "",
"intType":                  "undefined",
"intTypeSuffix":            "",
"microsecondsType":         "undefined",
"microsecondsTypeSuffix":   "",
"parameterType":            "undefined",
"parameterTypeClass":       "undefined",
"parameterTypeSuffix":      ""
]

ImplementationType(type) ::= <<
<implementationTypes.(type)>
>>

BareIrStream(body) ::= <<
<body.items:{ s | <(s.kind)(s)>;}; separator="\n">
>>

TopFunctionBody(functionBody) ::= <<
<!if(functionBody.reset)><ResetDurationCounter()><endif!>
<if(functionBody.irStream.kind)><(functionBody.irStream.kind)(functionBody.irStream)><endif>
>>

Expression(e)       ::= "<(e.kind)(e)>"

Number(arg)         ::= "<arg.value><ImplementationType(\"parameterTypeSuffix\")>"
