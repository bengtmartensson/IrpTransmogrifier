/*
Copyright (C) 2017 Bengt Martensson.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see http://www.gnu.org/licenses/.
*/

import "infrared4arduino.stg"

IsAbstract() ::= "false"

FileSuffix() ::= "Renderer.h"

FilePreamble() ::= ""

FileStart() ::= <<
#ifndef <CPPSymbol()>
#define <CPPSymbol()>

#include \<AbstractRenderer.h>
>>

FileEnding() ::= <<
#endif // ! <CPPSymbol()>
>>

CPPSymbol() ::= <<
<metaData.cProtocolName; format="upper">RENDERER_H
>>



ClassName() ::= "<metaData.cProtocolName>Renderer"

NamedProtocol(metaData, generalSpec, parameterSpecs, assignmentVariables, definitions, bitSpec, code) ::= <<
<FileStart()>

<ClassComment()>
class <ClassName()> : AbstractRenderer {
    <ClassBody()>
}

<FileEnding()>
>>

ClassComment() ::= <<
/**
 * Generated implementation of the <metaData.protocolName> protocol.
 * IRP:
 * <Irp()>
 * Protocol documentation:
 * <Documentation()>
 */
>>


ClassBody() ::= <<
private:
<DeclareFrequency()>
<DeclareIntroLength()>
<DeclareRepeatLength()>
<DeclareEndingLength()>

public:
<DeclareStatic()>
    
<!DeclareParameters()!>
    
<!DeclareAssignmentVariables()!>
private:    
<DeclareParameterlessConstructor()>
    

    
<!DeclareDutyCycle()!>
    
<!DefineNames()!>
    
<!DefineClassList()!>
>>

DeclareStatic() ::= <<
/**
 * Generates an IrSignal from the parameters.
 * <parameterSpecs.list:{p | @param <p.name>}; separator="\n * ">
 * @return IrSignal
 */
<ImplementationType("staticConst")> IrSignal *newIrSignal(<parameterSpecs.list:{p | <ImplementationType("parameterType")> <p.name>}; separator=", ">);

>>

DeclareFrequency() ::= <<
<ImplementationType("staticConst")> <ImplementationType("frequencyType")> frequency = <generalSpec.frequency; format="%d"><ImplementationType("frequencyTypeSuffix")>;
>>

DefineClassList() ::= <<
private static class <metaData.cProtocolName>IrList extends IrpRenderer.<if(bitSpec.pwm2)>Pwm2<elseif(bitSpec.pwm4)>Pwm4<elseif(bitSpec.standardBiPhase)>BiPhase<endif>IrList {

<if(bitSpec.pwm2)>
    <metaData.cProtocolName>IrList() {
        super(<bitSpec.lsbFirst>, <bitSpec.zeroFlash>d, <bitSpec.zeroGap>d, <bitSpec.oneFlash>d, <bitSpec.oneGap>d);
    }
<elseif(bitSpec.pwm4)>
    <metaData.cProtocolName>IrList() {
        super(<bitSpec.lsbFirst>, <bitSpec.zeroFlash>d, <bitSpec.zeroGap>d, <bitSpec.oneFlash>d, <bitSpec.oneGap>d,
              <bitSpec.twoFlash>d, <bitSpec.twoGap>d, <bitSpec.threeFlash>d, <bitSpec.threeGap>d);
    }
<elseif(bitSpec.standardBiPhase)>
    <metaData.cProtocolName>IrList() {
        super(<bitSpec.lsbFirst>, <bitSpec.biPhaseInverted>, <bitSpec.biPhaseHalfPeriod>d);
    }
<else>
<if(bitSpec.chunkSize)>
    private <ImplementationType("parameterType")> pendingData = 0<ImplementationType("parameterTypeSuffix")>;
    private <ImplementationType("parameterType")> pendingBits = 0<ImplementationType("parameterTypeSuffix")>;
<endif>

    <metaData.cProtocolName>IrList() {
        super(<bitSpec.lsbFirst>);
    }

    @Override
    void bitField(<ImplementationType("parameterType")> data, <ImplementationType("parameterType")> width) {
        <metaData.cProtocolName>IrList list = this;
        <if(bitSpec.chunkSize)>
        if (pendingBits > 0<ImplementationType("parameterTypeSuffix")>) {
            // This code is valid for msb only
            data &= (1<ImplementationType("parameterTypeSuffix")> \<\< width) - 1<ImplementationType("parameterTypeSuffix")>;
            data |= pendingData \<\< width;
            width += pendingBits;
            pendingBits = 0<ImplementationType("parameterTypeSuffix")>;
        }
        if (width % <bitSpec.chunkSize><ImplementationType("parameterTypeSuffix")> != 0<ImplementationType("parameterTypeSuffix")>) {
            pendingData = data;
            pendingBits = width;
            width = 0<ImplementationType("parameterTypeSuffix")>;
        }
        <endif>
        for (<ImplementationType("intType")> i = 0; i \< (<ImplementationType("intType")>) width; i<if(bitSpec.chunkSize)> += <bitSpec.chunkSize><else>++<endif>) {
            switch(((<ImplementationType("intType")>)data \>> <ShiftBitSpec("i", "width")>) & <bitSpec.bitMask>) {
                <bitSpec.list:{bitCode | <Case(i0, bitCode.items)>}; separator="\n">
            }
        }
    }
<endif>
}
>>
