/*
Copyright (C) 2017 Bengt Martensson.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see http://www.gnu.org/licenses/.
*/

import "irremote.stg"

IsAbstract() ::= "false"

FileName(protocolName) ::= <<
ir_<protocolName><CodeFileExtension()>
>>

FilePreamble() ::= ""

CppSymbol() ::= <<
SEND_<CProtocolNameUpperCase()>
>>

FileStart() ::= <<
#include "IRremote.h"
>>

Body() ::= <<
<Irp()>

<Documentation()>

<CppIfSymbol()>

<ExternalDeclarations()>

<IfHasReset(DeclareDurationCounter())>

<DefineFlashGapExtent()>

<DefineBitfieldFunctions()>
<DefineNames()>
<DefineSend()>

<CppEndifSymbol()>
>>

ExternalDeclarations() ::= <<
extern <ImplementationType("parameterType")> finiteBitField(<ImplementationType("parameterType")> data,
        <ImplementationType("parameterType")> width,
        <ImplementationType("parameterType")> chop,
        <ImplementationType("booleanType")> complement,
        <ImplementationType("booleanType")> reverse);
extern <ImplementationType("parameterType")> bitCount(<ImplementationType("parameterType")> data);
extern <ImplementationType("parameterType")> bitReverse(<ImplementationType("parameterType")> data, <ImplementationType("parameterType")> width);
>>

IncrementDurationCounter() ::= <<
<IfHasReset([DurationCounterName(), " += (", ImplementationType("longType"), ") d;"])>
>>

DefineFlashGapExtent() ::= <<
static inline void flash(IRsend* instance, <ImplementationType("microsecondsType")> d) {
    instance->mark(d);
    <IncrementDurationCounter()>
}

static inline void gap(IRsend* instance, <ImplementationType("microsecondsType")> d) {
    instance->space(d);
    <IncrementDurationCounter()>
}

<IfHasReset(["static inline void extent(IRsend* instance, ", ImplementationType("longType"), " d) {
    instance->space((", ImplementationType("intType"), ")(d - ", DurationCounterName(), "));
    ", DurationCounterName(), " = 0", ImplementationType("longTypeSuffix"), ";
}"])>
>>

DefineCppConstants() ::= <<
<if(protocol.bitSpec.pwm2)>
<protocol.bitSpec.list:{bitspec | <DefsForBitspec(bitspec, i0)>}; separator="\n">
<endif>
>>

DefsForBitspec(bitspec, index) ::= <<
<bitspec.items: {item | <DefsForDuration(item, index)>}; separator="\n">
>>

DefsForDuration(item, i0) ::= <<
<DefineCppSymbol([CProtocolName(), "_", i0, "_", item.kind], item.microseconds)>
>>

DefineSend() ::= <<
<DocumentPars(protocol.parameterSpecs.list)>
<SendFunctionSignature("IRsend::")> {
    <SetupFrequency()>
    IRsend* instance = this;
    <DefineAssignmentVariables()>
    <TopFunctionBody(protocol.intro)>
    <if(!protocol.intro.irStream.items)><TopFunctionBody(protocol.repeat)><endif>
}
>>

SetupFrequency() ::= <<
<!SpacedLineComment("Set IR carrier frequency")!>
enableIROut(<protocol.generalSpec.frequency><ImplementationType("frequencyTypeSuffix")> / 1000U);
>>

Flash(arg)          ::= "flash(instance, <arg.microseconds><ImplementationType(\"microsecondsTypeSuffix\")>)"
Gap(arg)            ::= "gap(instance, <arg.microseconds><ImplementationType(\"microsecondsTypeSuffix\")>)"
Extent(arg)         ::= "extent(instance, <arg.microseconds><ImplementationType(\"longTypeSuffix\")>)"

DefineAssignmentVariables() ::= <<
<protocol.assignmentVariables:{v | <DefineSimpleParameter(v)>}>
>>

DefineBitfieldFunctions() ::= <<
static void bitField(IRsend* instance, <ImplementationType("parameterType")> data, <ImplementationType("parameterType")> width) {
<if(protocol.bitSpec.chunkSize)>
    <DefineStaticVariable("pendingBits", "0U")>
    <DefineStaticVariable("pendingData", "0U")>
    if (pendingBits > 0<ImplementationType("parameterTypeSuffix")>) {
        // This code is valid for msb-first only
        data &= (1<ImplementationType("parameterTypeSuffix")> \<\< width) - 1<ImplementationType("parameterTypeSuffix")>;
        data |= pendingData \<\< width;
        width += pendingBits;
        pendingBits = 0<ImplementationType("parameterTypeSuffix")>;
    }
    if (width % <protocol.bitSpec.chunkSize><ImplementationType("parameterTypeSuffix")> != 0<ImplementationType("parameterTypeSuffix")>) {
        pendingData = data;
        pendingBits = width;
        width = 0<ImplementationType("parameterTypeSuffix")>;
    }
<endif>
    for (<ImplementationType("intType")> i = 0; i \< width; i<if(protocol.bitSpec.chunkSize)> += <protocol.bitSpec.chunkSize><else>++<endif>) {
        switch(((<ImplementationType("intType")>)data \>> <ShiftBitSpec("i", "width")>) & <protocol.bitSpec.bitMask>) {
        <protocol.bitSpec.list:{bitCode | <Case(i0, bitCode.items)>}; separator="\n">
        }
    }
}
>>

FiniteBitField(fbf) ::= <<
bitField(instance, <if(fbf.complement)>~<endif><if(fbf.reverse)>bitReverse(<endif><(fbf.data.kind)(fbf.data)><if(fbf.reverse)>, (<ImplementationType("parameterType")>)<(fbf.width.kind)(fbf.width)>)<endif><Chop(fbf.chop)>, <(fbf.width.kind)(fbf.width)>)
>>

InfiniteBitFieldExpression(arg) ::= <<
<if(arg.complement)>~<endif>((<(arg.data.kind)(arg.data)>) \>> (<(arg.chop.kind)(arg.chop)>))
>>

FiniteBitFieldExpression(arg) ::= <<
finiteBitField(<(arg.data.kind)(arg.data)>, <(arg.width.kind)(arg.width)>, <if(arg.chop)><(arg.chop.kind)(arg.chop)><else>0<endif>, <arg.complement>, <arg.reverse>)
>>
