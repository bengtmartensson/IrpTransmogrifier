/*
Copyright (C) 2017 Bengt Martensson.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see http://www.gnu.org/licenses/.
*/

import "irremote.stg"

IsAbstract() ::= "false"

FileName(protocolName) ::= <<
testSend<protocolName><CodeFileExtension()>
>>

FilePreamble() ::= ""

FileStart() ::= <<
#include "IRremote-SIL.h"
#include \<iostream>
#include \<stdlib.h>
>>

Body() ::= <<

<Irp()>

<DefineRand()>

<DefineTest()>

<DefineMain()>
>>

DefineRand() ::= <<
static <ImplementationType("parameterType")> rand(<ImplementationType("parameterType")> lower, <ImplementationType("parameterType")> upper) {
    double x = ((double) rand()) / ((double) RAND_MAX + 1.0); <LineComment(" [0, 1)")>
    return (<ImplementationType("parameterType")>) ((upper + 1 - lower) * x + lower); <LineComment(" [lower, upper]")>
}
>>

DefineMain() ::= <<
int main(int argc, char* argv[]) {
    unsigned reps = argc > 1 ? atoi(argv[1]) : 1;
    for (unsigned int i = 0; i \< reps; i++)
        <TestSendFunctionName(CProtocolName())>();
    return 0;
}
>>

TestSendFunctionName(protocolName) ::= "testSend<protocolName>"

DefineTest() ::= <<
void testSend<CProtocolName()>() {
    <protocol.parameterSpecs.list:{param | <ImplementationType("parameterType")> <param.name> = rand(<param.min>, <param.max>);}; separator="\n">
    std::cout \<\< "<CProtocolName()>" <protocol.parameterSpecs.list:{param | \<\< " " \<\< <param.name>}; separator=" "> \<\< std::endl;
    irsend.send<CProtocolName()>(<protocol.parameterSpecs.list:{param | <param.name>}; separator=", ">);
    finalize();
}
>>
