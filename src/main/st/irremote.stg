/*
Copyright (C) 2017 Bengt Martensson.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see http://www.gnu.org/licenses/.
*/

import "cplusplus.stg"

implementationTypes ::= [
"booleanType":              "bool",
"dutyCycleType":            "**UNDEFINED**",
"dutyCycleTypeSuffix":      "**UNDEFINED**",
"frequencyType":            "unsigned int",
"frequencyTypeSuffix":      "U",
"intType":                  "unsigned int",
"intTypeSuffix":            "U",
"longType":                 "unsigned long",
"longTypeSuffix":           "UL",
"microsecondsType":         "unsigned int", // For now...
"microsecondsTypeSuffix":   "",
"parameterType":            "unsigned int",
"parameterTypeClass":       "**UNDEFINED**",
"parameterTypeSuffix":      "U",
"staticConst":              "static const"
]

ImplementationType(type) ::= <<
<implementationTypes.(type)>
>>

// Not tried, should possibly be supported
ManyProtocolsInOneFile() ::= "false"

NamedProtocol(metaData, protocol) ::= <<
<FileStart()>
<Body()>
>>

DurationCounterName() ::= "durationCounter"

DefineNames() ::= <<
<if(protocol.definitions.list)>
// Local functions; corresponds to Definitions in the IRP.
<protocol.definitions.list:{p|<NameDefinition(p)>}; separator="\n\n">
<endif>
>>

NameDefinition(def) ::= <<
static inline <ImplementationType("parameterType")> <def.name>(<FormalParameterList()>) {
    return <(def.expression.kind)(def.expression)>;
}
>>

FormalParameterList() ::= <<
<ProtocolParametersParameterList()><if(protocol.assignmentVariables)>,<NewLine()>        <AssignmentVariablesParameterList()><endif>
>>

ActualParameterList()::= <<
<ProtocolParametersActualList()><if(protocol.assignmentVariables)>, <AssignmentVariablesActualList()><endif>
>>

ProtocolParametersParameterList() ::= <<
<DeclareAsFormalParameters(protocol.parameterSpecs.list)>
>>

ProtocolParametersActualList() ::= <<
<ActualParameters(protocol.parameterSpecs.list)>
>>

AssignmentVariablesParameterList() ::= <<
<protocol.assignmentVariables:{var | <DeclareFormalParameterByName(var)>}>
>>

AssignmentVariablesActualList() ::= <<
<protocol.assignmentVariables:{var | <ActualParametersByName(var)>}>
>>

DefinitionsParameterList() ::= <<
<DeclareAsFormalParameters(protocol.definitions.list)>
>>

DeclareAsFormalParameters(list) ::= <<
<list:{p | <DeclareFormalParameter(p)>}; separator=",\n        ">
>>

ActualParameters(list) ::= <<
<list:{p | <p.name>}; separator=", ">
>>

ActualParametersByName(list) ::= <<
<list:{name | <name>}; separator=",\n        ">
>>

DeclareParameter(parameter) ::= <<
private <if(parameter.memory)>static <endif><ImplementationType("parameterType")> <parameter.name><if(parameter.memory)> = <parameter.default><endif>
>>

DefineSimpleParameter(parameterName) ::= <<
<DeclareFormalParameterByName(parameterName)>;
>>

DeclareFormalParameter(parameter) ::= <<
<DeclareFormalParameterByName(parameter.name)>
>>

DeclareFormalParameterByName(parameterName) ::= <<
<ImplementationType("parameterType")> <parameterName><AttributeUnused()>
>>

// Bad for readability
//AttributeUnused() ::= " __attribute__((unused))"
AttributeUnused() ::= ""

DefineStaticVariable(name, initValue) ::= <<
static <ImplementationType("intType")> <name> = <initValue>;
>>

DeclareDurationCounter() ::= <<
static <ImplementationType("longType")> <DurationCounterName()> = 0<ImplementationType("longTypeSuffix")>;
>>

BitCount(e)           ::= <<
bitCount(<(e.arg.kind)(e.arg)>)
>>

Name(arg)           ::= "<arg.name><if(arg.isDefinition)>(<ActualParameterList()>)<endif>"

ResetDurationCounter() ::= <<
<DurationCounterName()> = 0<ImplementationType("longTypeSuffix")>;
>>

SendFunctionSignature(prefix) ::= <<
void <prefix>send<CProtocolName()>(<ProtocolParametersParameterList()>)
>>

DocumentPars(list) ::= <<
/**
 * Function for sending one signal from the protcol <CProtocolName()>.
 <list:{par | <DocumentFormalParameter(par)>}; separator="\n">
 */
>>

DocumentFormalParameter(par) ::= <<
* @param <par.name> Protocol parameter in the interval [<par.min> .. <par.max>].
>>
