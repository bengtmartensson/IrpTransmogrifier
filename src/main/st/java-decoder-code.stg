/*
Copyright (C) 2017 Bengt Martensson.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see http://www.gnu.org/licenses/.
*/

import "java.stg"

IsAbstract() ::= "false"

FileSuffix() ::= "Decoder.java"

FilePreamble() ::= <<
package org.harctoolbox.decoders;

import java.util.HashMap;
import java.util.Map;
import org.harctoolbox.ircore.IrSequence;
import org.harctoolbox.ircore.IrSignal;
import org.harctoolbox.irp.BitwiseParameter;

>>

ClassName() ::= "<metaData.cProtocolName>Decoder"

NamedProtocol(metaData, protocol) ::= <<
public final class <ClassName()> extends IrpDecoder {
    <ClassBody()>
}
>>

ClassBody() ::= <<
<Irp()>
<Documentation()>
    
<DeclareStatic()>
    
<DeclareParameters()>
    
<DeclareAssignmentVariables()>
    
<DeclareParameterlessConstructor()>

<DeclareOneParameterConstructor()>
    
<DeclareFrequency()>
    
<DeclareDutyCycle()>
    
<DeclareCompute()>
    
<DefineNames()>

<TopFunctions()>
    
<DefineClassList()>
>>

// Override from java.stg
DeclareParameter(parameter) ::= <<
private final <!if(parameter.memory)>static <endif!>BitwiseParameter <parameter.name><!if(parameter.memory)> = <parameter.default><endif!>
>>

// Override from java.stg
DeclareSimpleParameter(parameter) ::= <<
private final BitwiseParameter <parameter>;
>>

// Override from java.stg
DeclareParameterlessConstructor() ::= <<
public <ClassName()>() {
    super();
    <protocol.parameterSpecs.list:{ps|<ps.name> = new BitwiseParameter();}; separator="\n">
    <protocol.assignmentVariables:{var|<var> = new BitwiseParameter();}; separator="\n">
}
>>

DeclareOneParameterConstructor() ::= <<
public <ClassName()>(IrSignal irSignal) {
    this();
    try {
        decode(irSignal);
    } catch (DecodeException ex) {
    }
}
>>

DeclareCompute() ::= <<
@Override
public Map\<String, <ImplementationType("parameterTypeClass")>\> getParameters() {
    if (!isValid())
        return null;
    HashMap\<String, Long> map = new HashMap\<>(<length(protocol.parameterSpecs.list)>);
    <protocol.parameterSpecs.list:{p | map.put("<p.name>", <p.name>.getValue());}; separator="\n">
    return map;
}
>>

DeclareStatic() ::= <<
// Static convenience functions
public static Map\<String, Long> decodeSignal(IrSignal IrSignal) {
    <ClassName()> instance = new <ClassName()>(IrSignal);
    return instance.getParameters();
}
>>

DeclareFrequency() ::= <<
@Override
public <ImplementationType("frequencyType")> getFrequency() {
    return <protocol.generalSpec.frequency><ImplementationType("frequencyTypeSuffix")>;
}
>>

DefineClassList() ::= <<
private static class <metaData.cProtocolName>DecodeSequence extends IrpDecoder.<if(protocol.bitSpec.standardBiPhase)>BiPhase<elseif(protocol.sonyType)>SonyType<elseif(protocol.bitSpec.pwm2)>Pwm2<elseif(protocol.bitSpec.pwm4)>Pwm4<endif>DecodeSequence {
    private final static boolean lsbFirst = <protocol.bitSpec.lsbFirst>;
<if(protocol.bitSpec.standardBiPhase)>
    private final static boolean inverted = <protocol.bitSpec.biPhaseInverted>;
    private final static double halfPeriod = <protocol.bitSpec.biPhaseHalfPeriod>;

    private <metaData.cProtocolName>DecodeSequence(IrSequence irSequence) {
        super(irSequence, lsbFirst, inverted, halfPeriod);
    }
<elseif(protocol.bitSpec.pwm2)>
    private final static double zeroGap = <protocol.bitSpec.zeroGap>;
    private final static double zeroFlash = <protocol.bitSpec.zeroFlash>;
    private final static double oneGap = <protocol.bitSpec.oneGap>;
    private final static double oneFlash = <protocol.bitSpec.oneFlash>;

    private <metaData.cProtocolName>DecodeSequence(IrSequence irSequence) {
        super(irSequence, lsbFirst, zeroFlash, zeroGap, oneFlash, oneGap);
    }
<elseif(protocol.bitSpec.pwm4)>
    private final static double zeroGap = <protocol.bitSpec.zeroGap>;
    private final static double zeroFlash = <protocol.bitSpec.zeroFlash>;
    private final static double oneGap = <protocol.bitSpec.oneGap>;
    private final static double oneFlash = <protocol.bitSpec.oneFlash>;
    private final static double twoGap = <protocol.bitSpec.twoGap>;
    private final static double twoFlash = <protocol.bitSpec.twoFlash>;
    private final static double threeGap = <protocol.bitSpec.threeGap>;
    private final static double threeFlash = <protocol.bitSpec.threeFlash>;

    private <metaData.cProtocolName>DecodeSequence(IrSequence irSequence) {
        super(irSequence, lsbFirst, zeroFlash, zeroGap, oneFlash, oneGap, twoFlash, twoGap, threeFlash, threeGap);
    }
<else>
    *** Cannot generate code for this protocol. ***
<endif>
<if(metaData.absoluteTolerance)>

    @Override
    protected double getAbsoluteTolerance() {
        return <metaData.absoluteTolerance>d;
    }
<endif>
<if(metaData.relativeTolerance)>

    @Override
    protected double getRelativeTolerance() {
        return <metaData.relativeTolerance>d;
    }
<endif>
<if(metaData.frequencyTolerance)>
 
    @Override
    protected double getFrequencyTolerance() {
        return <metaData.frequencyTolerance>d;
    }
<endif>
}
>>

BitSpecDecode(b, caseNo) ::= <<
(<b.items:{item|duration(<item.microseconds>d, <i0>)}; separator=" && ">) ? <caseNo>L
>>

TopFunction(passName, functionBody) ::= <<
<if(functionBody.irStream.items)>
@Override
public void decodeAs<passName>(IrSequence irSequence) throws DecodeException {
    <metaData.cProtocolName>DecodeSequence seq = new <metaData.cProtocolName>DecodeSequence(irSequence);
    <TopFunctionBody(functionBody)>;
}
<endif>
>>

BareIrStream(body) ::= <<
<body.items:{ s | <(s.kind)(s)>}; separator=";\n">
>>

ResetDurationCounter() ::= ""

FiniteBitField(fbf) ::= <<
seq.bitField(<(fbf.data.kind)(fbf.data)>, <(fbf.width.kind)(fbf.width)>, <if(fbf.chop)><(fbf.chop.kind)(fbf.chop)><else>0L<endif>, <fbf.complement>, <fbf.reverse>)
>>

InfiniteBitFieldExpression(arg) ::= <<
<if(arg.complement)>~<endif>((<(arg.data.kind)(arg.data)>) \>> (<(arg.chop.kind)(arg.chop)>))
>>

FiniteBitFieldExpression(arg) ::= <<
finiteBitField(<(arg.data.kind)(arg.data)>, <(arg.width.kind)(arg.width)>, <if(arg.chop)><(arg.chop.kind)(arg.chop)><else>0L<endif>, <arg.complement>, <arg.reverse>)
>>

Assignment(arg)     ::= "assign(<(arg.name.kind)(arg.name)>, <(arg.expression.kind)(arg.expression)>)"

Flash(arg)          ::= "seq.flash(<arg.microseconds><ImplementationType(\"microsecondsTypeSuffix\")>)"
Gap(arg)            ::= "seq.gap(<arg.microseconds><ImplementationType(\"microsecondsTypeSuffix\")>)"
Extent(arg)         ::= "seq.extent(<arg.microseconds><ImplementationType(\"microsecondsTypeSuffix\")>)"

Name(arg)           ::= "<arg.name><if(arg.isDefinition)>()<elseif(arg.scalar)>.getValue()<endif>"

Exponentiate(arg1,arg2) ::= "IrpUtils.power(arg1,arg2)"
